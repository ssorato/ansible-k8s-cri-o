- hosts: k8s
  gather_facts: true
  become: yes
  tags: common
  tasks:

    - name: Add kernel module
      modprobe:
        name: "{{ item }}"
        state: present
      with_items:
        - br_netfilter
        - overlay

    - name: Load kernel modules on boot
      copy:
        src: crio.conf
        dest: /etc/modules-load.d/crio.conf
        owner: root
        group: root
        mode: '0644'
        backup: yes

    - name: Setup kenel params
      copy:
        src: 99-kubernetes-cri.conf
        dest: /etc/sysctl.d/99-kubernetes-cri.conf
        owner: root
        group: root
        mode: '0644'
        backup: yes

    - name: sysctl
      shell: "sysctl --system"
    
    - name: Disable swap
      shell: swapoff -a

    - name: Disable swap on fstab
      replace:
        path: /etc/fstab
        regexp: '^(\s*)([^#\n]+\s+)(\w+\s+)swap(\s+.*)$'
        replace: '#\1\2\3swap\4'
        backup: yes

    - name: Add cri-o apt key
      apt_key: 
        url: https://download.opensuse.org/repositories/devel:kubic:libcontainers:stable:cri-o:{{ crio_version }}/{{ os_version }}/Release.key
        state: present

    - name: Add cri-o apt key
      apt_key: 
        url: https://download.opensuse.org/repositories/devel:/kubic:/libcontainers:/stable/{{ os_version }}/Release.key
        state: present

    - name: Add cri-o repo
      apt_repository:
        repo: deb https://download.opensuse.org/repositories/devel:/kubic:/libcontainers:/stable/{{ os_version }}/ /
        state: present
        filename: devel:kubic:libcontainers:stable.list

    - name: Add cri-o repo
      apt_repository:
        repo: deb http://download.opensuse.org/repositories/devel:/kubic:/libcontainers:/stable:/cri-o:/{{ crio_version }}/{{ os_version }}/ /
        state: present
        filename: devel:kubic:libcontainers:stable:cri-o:{{ crio_version }}.list

    - name: Update apt
      apt:
        update_cache: yes

    - name: Install packages
      apt:
        name: 
          - cri-o
          - cri-o-runc
          - cri-tools
        state: present
        update_cache: true
  
    - name: Start cri-o
      systemd:
        state: started
        daemon_reload: yes
        name: crio

    - name: Enable cri-o on boot
      systemd:
        enabled: yes
        name: crio

    - name: Install kubeadm required packages
      apt:
        name:
          - apt-transport-https
          - ca-certificates
          - curl
        update_cache: true
        state: present

    - name: Add kubernetes repo key
      apt_key:
        url: https://packages.cloud.google.com/apt/doc/apt-key.gpg
        state: present

    - name: Add kubernetes repo
      apt_repository:
        repo: deb https://apt.kubernetes.io/ kubernetes-xenial main
        state: present
        filename: kubernetes.list

    - name: Update apt
      apt:
        update_cache: yes

    - name: Install packages
      apt:
        name: 
          - kubelet={{ crio_version }}.0-00
          - kubeadm={{ crio_version }}.0-00
          - kubectl={{ crio_version }}.0-00
        update_cache: true
        state: present

    - name: Hold packages
      dpkg_selections:
        name: "{{ item }}"
        selection: hold
      with_items:
        - kubelet
        - kubeadm
        - kubectl

- hosts: masters
  gather_facts: true
  become: no
  tags: masters
  tasks:

    - name: Copy kubeadm config
      become: yes
      template:
        src: kubeadm-config.yml.j2
        dest: /tmp/kubeadm-config.yml
        owner: root
        group: root
        mode: '0644'

    - name: Check if control-plane was initialized
      stat:
        path: /etc/kubernetes/admin.conf 
      register: admin_conf

    - name: Initializing control-plane node
      become: yes
      shell: "kubeadm init --config /tmp/kubeadm-config.yml"
      register: result
      # until: result.stdout.find("Your Kubernetes master has initialized successfully!") != -1
      # retries: 7
      # delay: 60
      when: not admin_conf.stat.exists

    - name: Show result
      debug:
        var: result
      when: not admin_conf.stat.exists

    - name: Remove kubeadm config
      become: yes
      file:
        path: /tmp/kubeadm-config.yml
        state: absent
      when: not admin_conf.stat.exists

    - name: Configure kubectl on ansible remote user 
      become: yes
      shell: |
        mkdir -p {{ ansible_user_dir }}/.kube
        cp -f /etc/kubernetes/admin.conf {{ ansible_user_dir }}/.kube/config
        chown {{ ansible_user_id }}:{{ ansible_user_id }} {{ ansible_user_dir }}/.kube/config
        echo 'source <(kubectl completion bash)' >> {{ ansible_user_dir }}/.bashrc

    - name: Get cluster nodes
      shell: "kubectl get nodes -o wide"
      register: result

    - name: Show cluster nodes
      debug:
        var: result

    - name: Add flanner network
      become: no
      shell: "kubectl apply -f https://raw.githubusercontent.com/coreos/flannel/master/Documentation/kube-flannel.yml"


    - name: Get kube-system pods
      shell: "kubectl get pods -n kube-system"
      register: result

    - name: Show kube-system pods
      debug:
        var: result

    - name: Install MetalLB
      shell: |
        kubectl apply -f https://raw.githubusercontent.com/metallb/metallb/v0.11.0/manifests/namespace.yaml
        kubectl apply -f https://raw.githubusercontent.com/metallb/metallb/v0.11.0/manifests/metallb.yaml
      tags:
        - lb

    - name: Copy MetalLB config file to the master node
      template:
        src: metallb.yml.j2
        dest: /tmp/metallb.yml
      tags:
        - lb

    - name: Configure MetalLB
      shell: |
        kubectl apply -f /tmp/metallb.yml
      tags:
        - lb
  
    - name: Remove MetalLB config file
      file:
        path: /tmp/metallb.yml
        state: absent
      tags:
        - lb

    - name: Get Metric Server config file
      get_url:
        url: https://github.com/kubernetes-sigs/metrics-server/releases/latest/download/components.yaml
        dest: /tmp/metric-server.yaml
        mode: '0640'
      tags:
        - metrics

    - name: Configure Metric Server with insecure tls
      lineinfile:
        path: /tmp/metric-server.yaml
        insertafter: "- args:"
        line: "        - --kubelet-insecure-tls"
      tags:
        - metrics

    - name: Create Metric Server
      shell: |
        kubectl apply -f /tmp/metric-server.yaml
      tags:
        - metrics
  
    - name: Remove Metric Server config file
      file:
        path: /tmp/metric-server.yaml
        state: absent
      tags:
        - metrics

    - name: Create token to join cluster
      become: yes
      shell: kubeadm token create --print-join-command
      register: join_command_raw

    - name: Set join command as fact
      set_fact: join_command="{{ join_command_raw.stdout }}"

- hosts: workers
  gather_facts: true
  become: yes
  tags: workers
  tasks:

  - name: Join node to cluster
    shell: "{{ hostvars[groups['masters'][0]]['join_command'] }}"
    ignore_errors: yes
    args:
      chdir: $HOME

- hosts: storages
  gather_facts: true
  become: yes
  tags: storages
  tasks:

    - name: Update apt
      apt:
        update_cache: yes

    - name: Install packages
      apt:
        name: 
          - nfs-kernel-server
          - nfs-common
          - tgt
        state: present
        update_cache: true

    - name: Create NFS data directory
      file:
        path: /data
        state: directory
        mode: '0755'
    
    - name: Configure NFS server
      template:
        src: nfs_exports.j2
        dest: /etc/exports
        owner: root
        group: root
        mode: '0644'

    - name: Restart NFS server
      systemd:
        enabled: yes
        state: restarted
        name: nfs-kernel-server

    - name: Configure iSCSI server
      template:
        src: iscsi.conf.j2
        dest: /etc/tgt/conf.d/iqn.2020-07.lab.com.conf
        owner: root
        group: root
        mode: '0644'

    - name: Restart iSCSI server
      systemd:
        enabled: yes
        state: restarted
        name: tgt
